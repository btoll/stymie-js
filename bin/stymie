#!/usr/bin/env node

const jcrypt = require('jcrypt');
const key = require('../src/key');
const file = require('../src/file');
const util = require('../src/util');
const install = require('../src/install');
const inquirer = require('inquirer');

const argv = require('yargs')
    .usage('Usage: stymie <command> [options]')
    .example('stymie init', 'Installs')
    .command('init', 'Install the password file directory and config file')

    .example('stymie generate', 'Generates a diceware passphrase')
    .command('generate', 'Generate a passphrase')

    .command('', '')

    .example('stymie add', 'Adds a new entry')
    .command('add', 'Add a new entry')

    .example('stymie edit', 'Edits an entry')
    .command('edit', 'Edit an entry')

    .example('stymie get', 'Retrieves an entry')
    .command('get', 'Get an entry')

    .example('stymie has', 'Checks if the entry exists')
    .command('has', 'Check if the entry exists')

    .example('stymie list', 'Lists all entries')
    .command('list', 'List all entries')
    .command('ls', 'Alias of `list`')

    .example('stymie rm', 'Deletes an entry')
    .command('rm', 'Delete an entry')

    .command('', '')

    .example('stymie add-file', 'Adds a new file')
    .command('add-file', 'Add a new file')

    .example('stymie edit-file', 'Edits a file')
    .command('edit-file', 'Edit a file')

    .example('stymie get-file', 'Retrieves a file')
    .command('get-file', 'Get a file')

    .example('stymie has-file', 'Checks if the file exists')
    .command('has-file', 'Check if the file exists')

    .example('stymie list-file', 'Lists all files')
    .command('list-file', 'List all files')
    .command('ls-file', 'Alias of `list-file`')

    .example('stymie rm-file', 'Deletes a file')
    .command('rm-file', 'Delete a file')

    .alias('f', 'field')
    .describe('field', 'Gets the specified key value from an entry (only with `get` command)')

    .alias('s', 'strip')
    .describe('strip', 'Strips any whitespace from a field (only with `get` command)')

    .help('h')
    .alias('h', 'help')
    .argv;

const command = argv._[0];

// TODO
key.stripped(!!argv.strip);

if (command === 'init') {
    install();
} else {
    const env = process.env;
    const stymieDir = `${env.STYMIE || env.HOME}/.stymie.d`;

    util.fileExists(`${stymieDir}/c`)
    .then(configFile =>
        jcrypt.readFile(configFile, ['--decrypt'])
        .then(data => {
            util.setGPGOptions(data);

            switch (command) {
                case 'add': key.add(argv._[1]); break;
                case 'add-file': file.add(argv._[1]); break;

                case 'edit': key.edit(argv._[1]); break;
                case 'edit-file': file.edit(argv._[1]); break;

                case 'generate': key.generate(); break;

                case 'get': key.get(argv._[1], argv.field); break;
                case 'get-file': file.get(argv._[1], argv.field); break;

                case 'has': key.has(argv._[1]); break;
                case 'has-file': file.has(argv._[1]); break;

                case 'ls':
                case 'list': key.list(); break;

                case 'ls-file':
                case 'list-file': file.list(); break;

                case 'rm': key.rm(argv._[1]); break;
                case 'rm-file': file.rm(argv._[1]); break;

                default: util.logError('Bad command');
            }
        })
        .catch(util.logError)
    )
    .catch(err => {
        // TODO: Canceling GPG when asking for passphrase will get here, THIS IS NOT GOOD!
        util.logWarn('It appears that stymie is not installed.\n');

        inquirer.prompt([{
            type: 'list',
            name: 'install',
            message: 'Do you wish to install now?:',
            choices: [
                {name: 'Yes', value: true},
                {name: 'No, I\'ll do it myself later.', value: false}
            ]
        }], answers => {
            if (!answers.install) {
                util.logInfo('Run `bash scripts/postinstall.bash` to install.');
            } else {
                install();
            }
        });
    });
}


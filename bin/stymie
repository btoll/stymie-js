#!/usr/bin/env node

const inquirer = require('inquirer');
const init = require('../src/init');
const jcrypt = require('jcrypt');
const key = require('../src/index');
const util = require('../src/util');

const argv = require('yargs')
    .usage('Usage: stymie <command> [options]')
    .example('stymie init', 'Installs')
    .command('init', 'Install the password file directory and config file')

    .example('stymie generate', 'Generates a diceware passphrase')
    .command('generate', 'Generate a passphrase')

    .command('', '')

    .example('stymie add', 'Adds a new entry')
    .command('add', 'Add a new entry')

    .example('stymie edit', 'Edits an entry')
    .command('edit', 'Edit an entry')

    .example('stymie get', 'Retrieves an entry')
    .command('get', 'Get an entry')

    .example('stymie has', 'Checks if the entry exists')
    .command('has', 'Check if the entry exists')

    .example('stymie list', 'Lists all entries')
    .command('list', 'List all entries')
    .command('ls', 'Alias of `list`')

    .example('stymie rm', 'Deletes an entry')
    .command('rm', 'Delete an entry')

    .alias('f', 'field')
    .describe('field', 'Gets the specified key value from an entry (only with `get` command)')

    .alias('s', 'strip')
    .describe('strip', 'Strips any whitespace from a field (only with `get` command)')

    .help('h')
    .alias('h', 'help')
    .argv;

const command = argv._[0];
const env = process.env;
const stymieDir = `${env.STYMIE || env.HOME}/.stymie.d`;

// TODO
key.stripped(!!argv.strip);

if (command === 'init') {
    // TODO: Allow multiple installations in multiple locations?
    util.fileExists(`${stymieDir}/c`)
    .then(() => util.logWarn('Stymie already exists!'))
    .catch(init);
} else {
    util.fileExists(`${stymieDir}/c`)
    .then(configFile =>
        jcrypt.decryptFile(configFile)
        .then(data => {
            util.setGPGOptions(data);

            switch (command) {
                case 'add': key.add(argv._[1]); break;
                case 'edit': key.edit(argv._[1]); break;
                case 'generate': key.generate(); break;
                case 'get': key.get(argv._[1], argv.field); break;
                case 'has': key.has(argv._[1]); break;
                case 'ls':
                case 'list': key.list(); break;
                case 'rm': key.rm(argv._[1]); break;
                default: util.logError('Bad command');
            }
        })
        .catch(util.logError)
    )
    .catch(err => {
        // TODO: Canceling GPG when asking for passphrase will get here, THIS IS NOT GOOD!
        util.logWarn('It appears that stymie is not installed.\n');

        inquirer.prompt([{
            type: 'list',
            name: 'install',
            message: 'Install now?:',
            choices: [
                {name: 'Yes', value: true},
                {name: 'No', value: false}
            ]
        }], answers => {
            if (!answers.install) {
                util.logInfo('Aborting install.');
            } else {
                init();
            }
        });
    });
}

